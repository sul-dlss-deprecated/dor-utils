#!/usr/bin/env ruby
USAGE = "Usage: decomission [-e ENVIRONMENT] druids.txt \"Decomission tag\""
require_relative '../config/boot'

class Decom

  def initialize
    if(Dor::Config.decommission_log)
      log = Dor::Config.decommission_log
    else
      log = STDOUT
    end
    @logger = Logger.new log
  end

  def start args
    if(args.size != 2)
      puts USAGE
      exit
    end
    lines = IO.readlines(args.shift).map {|l| l.strip}
    lines.pop if lines.last.empty?
    @druids = lines.map do |id|
      if id =~ /^druid:/
        id
      else
        "druid:#{id}"
      end
    end
    @tag = args.shift

    decomission
  end

  def decomission
    @druids.each do |druid|
      begin
        obj = Dor::Item.find druid
        obj.decomission @tag
        obj.save

        Dor::DigitalStacksService.prune_stacks_dir druid
        obj.publish_metadata
        Dor::CleanupService.cleanup_by_druid druid

        @logger.info "Decomissioned #{druid}"
      rescue => e
        @logger.error "Unable to decomission #{druid} : #{e.inspect}"
        @logger.error e.backtrace.join("\n")
      end
    end
  end

end

Decom.new.start ARGV
